version: 2.1

commands:
  install-rust:
    steps:
      - run:
          name: Install Rust
          command: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> $BASH_ENV
  setup-rust-toolchain:
    parameters:
      rust-version:
        type: string
        default: "stable"
    steps:
      - run:
          name: Setup Rust toolchain
          command: |
            rustup install <<parameters.rust-version>>
            rustup default <<parameters.rust-version>>
            rustc --version
  rust-tests:
    parameters:
      rust-version:
        type: string
        default: "stable"
    steps:
      - test-setup:
          rust-version: <<parameters.rust-version>>
      # Test with 1. only default features on, 2. all features on, 3. no features on.
      # This is not perfect (really we want the cartesian product), but is good enough in practice.
      - run:
          name: Test
          command: cargo test --all --verbose
      - run:
          name: Test (all features)
          command: cargo test --all --all-features --verbose
      - run:
          name: Test (no default features)
          command: cargo test --all --no-default-features --verbose

jobs:
  Check Rust formatting:
    docker:
      - image: circleci/rust:latest
    steps:
      - checkout
      - run: rustup component add rustfmt
      - run: rustfmt --version
      - run: cargo fmt -- --check
  Rust tests - stable:
    docker:
      - image: circleci/rust:latest
    # We have to use a machine with more RAM for tests so we don't run out of memory.
    resource_class: medium+
    steps:
      - rust-tests
  Rust tests - beta:
    docker:
      - image: circleci/rust:latest
    resource_class: medium+
    steps:
      - rust-tests:
          rust-version: "beta"

workflows:
  version: 2
  check-formating:
    jobs:
      - Check Rust formatting
  run-tests:
    jobs:
      - Rust tests - stable
      - Rust tests - beta
